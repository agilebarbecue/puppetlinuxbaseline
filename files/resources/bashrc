if [ -S "$SSH_AUTH_SOCK" -a ! -L "$SSH_AUTH_SOCK" ] ; then
  # when we get a real socket up front, link it to our named file
  ln -fs $SSH_AUTH_SOCK $HOME/.ssh/auth_sock
else
  # otherwise force the named file
  export SSH_AUTH_SOCK=$HOME/.ssh/auth_sock
fi

alias ls='ls --color=auto'
[[ -s $HOME/.rvm/scripts/rvm ]] && source $HOME/.rvm/scripts/rvm
export MAKEFLAGS=-j8 
export JAVA_HOME=/opt/java
#for sway
export _JAVA_AWT_WM_NONREPARENTING=1
export XKB_DEFAULT_LAYOUT=pl
export XKB_DEFAULT_OPTIONS=caps:ctrl_modifier

export EDITOR=vim

set -o vi

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

#ssh-agent -a /tmp/ssh-paul-sock >/dev/null 2>&1 
#export SSH_AUTH_SOCK=/tmp/ssh-paul-sock

#gpg-agent --daemon 2>/dev/null
#
#unset SSH_AGENT_PID
#if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
#  export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
#fi
#if [ "${DEVCONTAINER}" == "true" ]; then
#  export SSH_AUTH_SOCK=/tmp/S.gpg-agent.ssh
#fi
#
#some default paths for things we probably install in /opt
export PATH=/opt/google-cloud-sdk/bin:/opt/istio/bin:/opt/java/bin:/opt/scala/bin:/opt/maven/bin:/opt/ant/bin:/opt/go/bin:/opt/node/bin:/opt/activator:/opt/gradle/bin:/opt/sbt/bin:$PATH

if [[ -f /usr/bin/vimx ]]; then
    alias vim=vimx
    alias vi=vimx
fi

# get current branch in git repo
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
		echo "[${BRANCH}${STAT}]"
	else
		echo ""
	fi
}

# get current status of git repo
function parse_git_dirty {
	status=`git status 2>&1 | tee`
	dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo ""
	fi
}

export PS1="\\[\e[38;5;69m\\]\D{%F %T} \u@\h:\w \`parse_git_branch\`\\[\e[0m\\]\n$ "


#we control this (main) one - so source a local one that's not controlled by puppet
if [[ -f ~/.bashrc.local ]]; then
    . ~/.bashrc.local
fi

virt() {
  GDK_SCALE=1 GDK_BACKEND=x11 DISPLAY=:0 virt-viewer -c qemu:///system $1
}

virtm() {
  GDK_SCALE=1 GDK_BACKEND=x11 DISPLAY=:0 virt-manager
}
